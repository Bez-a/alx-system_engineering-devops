import fuelProportionFunctions as fpf
#from bokeh.models import ColumnDataSource, CustomJS, Slider
import numpy as np

from bokeh.layouts import column, row
from bokeh.models import ColumnDataSource, CustomJS, Slider
from bokeh.plotting import figure, show
from bokeh.models import Slider, TextInput
import pandas as pd
from bokeh.transform import cumsum
from bokeh.palettes import Category20c
from bokeh.palettes import Spectral5

# Define a data source
data = pd.read_excel('DataUpdate.xlsx')
# data = pd.Series(x).reset_index(name='value').rename(columns={'index': 'country'})
# data['angle'] = data['value']/data['value'].sum() * 2*pi
# data['color'] = Category20c[len(x)]
#source

source = ColumnDataSource(data=dict(angle=[0, 0, 0, 0, 0], color=Spectral5))

# Create the pie chart figure
# p = figure(min_height=400, min_width=400, title="Pie Chart", tools="reset, hover, save")
# p.wedge(x=0, y=1, radius=0.4, start_angle=0, end_angle='angle', color='color', source=source)

p = figure(height=350, title="Pie Chart", toolbar_location=None,
           tools="hover", tooltips="@country: @value", x_range=(-0.5, 1.0))

p.wedge(x=0, y=1, radius=0.4,
        start_angle=cumsum('angle', include_zero=True), end_angle=cumsum('angle'),
        line_color="white", fill_color='color', legend_field='country', source=data)

#source = ColumnDataSource(data=dict(x=x, y=y))

#plot = figure(y_range=(-10, 10), width=400, height=400)

#plot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)
#my Sliders
Intro_slider= Slider(start=2, end=3, value=4,step=5, title=" year of Introduction")
FAYears_slider=Slider(start=10, end=45, value=10, step=5, title="Years to Full Adoption")#change the start n end baased on the doe

InfusionRate_slider=Slider(start=0.5, end=1, value=0.5, step=5, title="Infusion Rate")
AdoptionShare_slider=Slider(start=0, end=1, value=.1, step=5, title="Full Adoption Share")
Year_slider=Slider(start=2021, end=2075)

#Range_slider=Slider(start=4, end=25, value=360, step=5, title="Lifecycle Range Metric")# change it to constant numbers
#Start_year=Slider(start=4, end=25, value=360, step=5, title="Lifecycle Year" )

#Assigning Callable Variables
Intro=Intro_slider.value
FA=FAYears_slider.value
print(FA)
print(type(FA))

IN=InfusionRate_slider.value
print(IN)
print(type(IN))
AD=AdoptionShare_slider.value
print(AD)
print(type(AD))
YS=Year_slider
print(type(YS))

ST= 2021 #it is the start year
#Start_year.value
RA=2060-2021+1

ans=fpf.ptlProportion(5,25,0.6,0.3,RA,ST)
# Range_slider.value




# these output are from fpf and we have 4 of them
# data = pd.Series(x).reset_index(name='value').rename(columns={'index': 'country'})

output1=fpf.safProportion(FA,IN,AD,RA,ST)
#introYear, fullAdoptYearAdd, infusionRate, fullAdoptShare, rangeYears, startYear)
output2=fpf.ptlProportion(Intro, FA, IN, AD, RA, ST)
output3=fpf.safCO2Intensities(0.5,RA)
output4=fpf.ptlCO2Intensities(Intro,FA,IN,AD,RA,ST)


controls = [FAYears_slider, InfusionRate_slider, AdoptionShare_slider,Year_slider ]
for control in controls:
    control.on_change('value', lambda attr, old, new: update())


#InfusionRate_slider, AdoptionShare_slider, Lifecycle_slider
layout = row(p,column(FAYears_slider, InfusionRate_slider, AdoptionShare_slider,Year_slider))

show(layout)


# Define the callback function
callback = CustomJS(args=dict(source=source, slider1=FA, slider2=IN,slider3=AD, slider4=YS),
                    code="""
    const data = source.data;
    const angle = data['angle'];
    angle[0] = slider1.value;
    angle[1] = slider2.value;
    angle[2] = slider3.value;
    angle[3] = slider4.value;
    angle[4] = slider5.value;
    source.change.emit();
""")


#Link callback function into the sliders

FAYears_slider.js_on_change('value', callback)
InfusionRate_slider.js_on_change('value', callback)
AdoptionShare_slider.js_on_change('value', callback)
Year_slider.js_on_change('value', callback)


#fullAdoptYearAdd, infusionRate, fullAdoptShare, rangeYears, startYear




show(row(column(FAYears_slider,InfusionRate_slider,AdoptionShare_slider))) 


